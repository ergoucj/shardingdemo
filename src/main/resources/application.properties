#配置数据源 分别是 主数据库1个 从数据库1个
spring.shardingsphere.datasource.names=master0,master0slave0,

# 主第一个数据库
spring.shardingsphere.datasource.master0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.master0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.master0.url=jdbc:mysql://localhost:3306/db_test
spring.shardingsphere.datasource.master0.username=root
spring.shardingsphere.datasource.master0.password=123456
# 从第一个数据库

spring.shardingsphere.datasource.master0slave0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.master0slave0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.master0slave0.url=jdbc:mysql://localhost:3306/db_test_slave
spring.shardingsphere.datasource.master0slave0.username=root
spring.shardingsphere.datasource.master0slave0.password=123456


# 读写分离配置
# 从库的读取规则为round_robin（轮询策略），除了轮询策略，还有支持random（随机策略）
spring.shardingsphere.masterslave.load-balance-algorithm-type=round_robin

# 逻辑主从库名和实际主从库映射关系
# 主数据库0
spring.shardingsphere.sharding.master-slave-rules.ds0.master-data-source-name=master0
# 从数据库0
spring.shardingsphere.sharding.master-slave-rules.ds0.slave-data-source-names=master0slave0

# 分表策略
spring.shardingsphere.sharding.tables.book.actual-data-nodes=ds$->{0}.book$->{0..1}
spring.shardingsphere.sharding.tables.book.table-strategy.inline.sharding-column=id
spring.shardingsphere.sharding.tables.book.table-strategy.inline.algorithm-expression=book$->{id % 2}
spring.shardingsphere.sharding.tables.book.key-generator.column=id
spring.shardingsphere.sharding.tables.book.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.binding-tables=book





mybatis.typeAliasesPackage=com.example.sharding.shardingdemo.entity
mybatis.mapperLocations=classpath:mapper/*.xml

#打印sql
spring.shardingsphere.props.sql.show=true

#mybatis 打印 sql
logging.level.com.example.sharding.shardingdemo.dao=debug
